library(httr2)
library(tidyverse)
library(lubridate)
library(readr)
pop_2022_2023 <- read_excel("./Users/zhangjingxi/Desktop/260 final/data/pop.xlsx", col_names = FALSE)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(stringr)
library(tidyverse)
library(jsonlite)
library(purrr)
library(httr2)
library(tidyverse)
library(lubridate)
library(readr)
pop_2022_2023 <- read_excel("/Users/zhangjingxi/Desktop/260 final/data/pop.xlsx", col_names = FALSE)
colnames(pop_2022_2023) <- as.character(pop_2022_2023[2, ]) # Set the first row as headers
# remove twice the first row since there are some header when download the data.
pop_2022_2023 <- pop_2022_2023[-1, ]
pop_2022_2023 <- pop_2022_2023[-1, ]
# remove all the '.' in front of the state name
pop_2022_2023$state_name <- gsub("^\\.", "", pop_2022_2023$state_name)
# Make the data same as pset-4
long_pop<- pop_2022_2023 %>%
pivot_longer(
cols = starts_with("20"),
names_to = "year",
values_to = "population"
)
census_key <- "e772e43cd3ddc77cead5d930d1da491dede1a107"
saveRDS(census_key, file = "census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
request <- request (url) |>
req_url_query(get = I("POP_2020,POP_2021,NAME"),
`for` = I("state:*"),
key = census_key)
response <- request |> req_perform()
population <-  response |>
resp_body_json(simplifyVector = TRUE)
population <- population |>
row_to_names(1) |>
as.tibble()|> # convert to tibble
select(-state)|> # remove stat column
rename(state_name = NAME) |> # rename state column to state_name
pivot_longer (-state_name, names_to = "year", values_to = "population")|>
mutate(year= str_remove(year, "POP_"))|> # remove POP_ from year
mutate(across(-state_name,as.numeric)) # parese all relevant colunns to numeric
population <- rbind(population, long_pop)
population <- population |>
mutate(state = state.abb[match(state_name, state.name)])|>
mutate(state = case_when (
state_name == "Puerto Rico" ~ "PR",
state_name == "District of Columbia" ~ "DC",
TRUE ~ state)) # use case_when to add abbreviations for DC and PR
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url,simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x)
data.frame(region = x$region, region_name = x$region_name, state_name = x$states)|>
mutate(region_name = case_when (
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~
"NY, NJ, PR, VI",
TRUE ~ region_name)))
population <- left_join(population, regions, by = "state_name")
population <- population %>%
mutate(year = as.numeric(year))
get_cdc_data<- function(url, limit = 1000000000) {
ret <- request (url) |>
req_url_query("$limit" = limit) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
return(ret)
}
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
deaths_raw<- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
cases <-cases_raw |>
mutate(cases = parse_number(new_cases),
date = as_date(ymd_hms(end_date)))|>
filter(state %in% population$state) |>
mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date))|>
select(state,mmwr_year,mmwr_week,cases) |>
arrange(state, mmwr_year , mmwr_week)
deaths <- deaths_raw |>
mutate(deaths= parse_number(covid_19_deaths),
date = as_date(ymd_hms(end_date))) |>
filter(state %in% population$state_name) |>
mutate(State = state.abb[match(state,state.name)]) |>
mutate(State = case_when (
state == "Puerto Rico" ~ "PR",
state == "District of Columbia" ~ "DC",
TRUE ~ State)) |>
mutate(mmwr_year = epiyear(date),mmwr_week= as.numeric(mmwr_week))|>
select(mmwr_week, mmwr_year, deaths, State)|>
arrange(State, mmwr_year, mmwr_week)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(stringr)
library(tidyverse)
library(jsonlite)
library(purrr)
library(httr2)
library(tidyverse)
library(lubridate)
library(readr)
pop_2022_2023 <- read_excel("/Users/zhangjingxi/Desktop/260 final/data/pop.xlsx", col_names = FALSE)
colnames(pop_2022_2023) <- as.character(pop_2022_2023[2, ]) # Set the first row as headers
# remove twice the first row since there are some header when download the data.
pop_2022_2023 <- pop_2022_2023[-1, ]
pop_2022_2023 <- pop_2022_2023[-1, ]
# remove all the '.' in front of the state name
pop_2022_2023$state_name <- gsub("^\\.", "", pop_2022_2023$state_name)
# Make the data same as pset-4
long_pop<- pop_2022_2023 %>%
pivot_longer(
cols = starts_with("20"),
names_to = "year",
values_to = "population"
)
census_key <- "e772e43cd3ddc77cead5d930d1da491dede1a107"
saveRDS(census_key, file = "census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
request <- request (url) |>
req_url_query(get = I("POP_2020,POP_2021,NAME"),
`for` = I("state:*"),
key = census_key)
response <- request |> req_perform()
population <-  response |>
resp_body_json(simplifyVector = TRUE)
population <- population |>
row_to_names(1) |>
as.tibble()|> # convert to tibble
select(-state)|> # remove stat column
rename(state_name = NAME) |> # rename state column to state_name
pivot_longer (-state_name, names_to = "year", values_to = "population")|>
mutate(year= str_remove(year, "POP_"))|> # remove POP_ from year
mutate(across(-state_name,as.numeric)) # parese all relevant colunns to numeric
population <- rbind(population, long_pop)
population <- population |>
mutate(state = state.abb[match(state_name, state.name)])|>
mutate(state = case_when (
state_name == "Puerto Rico" ~ "PR",
state_name == "District of Columbia" ~ "DC",
TRUE ~ state)) # use case_when to add abbreviations for DC and PR
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url,simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x)
data.frame(region = x$region, region_name = x$region_name, state_name = x$states)|>
mutate(region_name = case_when (
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~
"NY, NJ, PR, VI",
TRUE ~ region_name)))
population <- left_join(population, regions, by = "state_name")
population <- population %>%
mutate(year = as.numeric(year))
get_cdc_data<- function(url, limit = 1000000000) {
ret <- request (url) |>
req_url_query("$limit" = limit) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
return(ret)
}
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
deaths_raw<- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
cases <-cases_raw |>
mutate(cases = parse_number(new_cases),
date = as_date(ymd_hms(end_date)))|>
filter(state %in% population$state) |>
mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date))|>
select(state,mmwr_year,mmwr_week,cases) |>
arrange(state, mmwr_year , mmwr_week)
deaths <- deaths_raw |>
mutate(deaths= parse_number(covid_19_deaths),
date = as_date(ymd_hms(end_date))) |>
filter(state %in% population$state_name) |>
mutate(State = state.abb[match(state,state.name)]) |>
mutate(State = case_when (
state == "Puerto Rico" ~ "PR",
state == "District of Columbia" ~ "DC",
TRUE ~ State)) |>
mutate(mmwr_year = epiyear(date),mmwr_week= as.numeric(mmwr_week))|>
select(mmwr_week, mmwr_year, deaths, State)|>
arrange(State, mmwr_year, mmwr_week)
# Aggregate data at the national level
national_data <- cases %>%
group_by(mmwr_year, mmwr_week) %>%
summarise(total_cases = sum(cases, na.rm = TRUE)) %>%
ungroup()
# Create a date column for easier time-series plotting
national_data <- national_data %>%
mutate(date = as.Date(paste(mmwr_year, mmwr_week, 1, sep = "-"), format = "%Y-%U-%u"))
# Plot the national trend of cases
ggplot(national_data, aes(x = date, y = total_cases)) +
geom_line(color = "blue") +
scale_x_date(
date_labels = "%b",  # Format for abbreviated month names
date_breaks = "2 month"  # Breaks at every month
)+
labs(
title = "National Weekly COVID-19 Cases",
x = "Date",
y = "Total Cases"
) +
theme_minimal()
# Plot the national trend of cases
ggplot(national_data, aes(x = date, y = total_cases)) +
geom_line(color = "blue") +
labs(
title = "National Weekly COVID-19 Cases",
x = "Date",
y = "Total Cases"
) +
theme_minimal()
# Aggregate death data at the national level
national_deaths <- deaths %>%
group_by(mmwr_year, mmwr_week) %>%
summarise(total_deaths = sum(deaths, na.rm = TRUE)) %>%
ungroup()
# Create a date column for easier time-series plotting
national_deaths <- national_deaths %>%
mutate(date = as.Date(paste(mmwr_year, mmwr_week, 1, sep = "-"), format = "%Y-%U-%u"))
# If values are too large, consider a log transformation
ggplot(national_deaths, aes(x = date, y = total_deaths)) +
geom_line(color = "blue") +
scale_y_continuous(trans = "log10",  # Apply log transformation
labels = scales::comma) +  # Format y-axis labels
labs(
title = "COVID-19 Deaths Over Time in the U.S.",
x = "Month",
y = "Total Deaths (Log Scale)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# Define 3 period
death_rates <- deaths %>%
mutate(wave = case_when(
(mmwr_year == 2020 & mmwr_week >= 40) |  # October 2020
(mmwr_year == 2021 & mmwr_week <= 13) ~ "Wave_1",  # March 2021
(mmwr_year == 2021 & mmwr_week >= 31) |  # August 2021
(mmwr_year == 2022 & mmwr_week <= 17) ~ "Wave_2",  # April 2022
(mmwr_year == 2022 & mmwr_week >= 44) |  # November 2022
(mmwr_year == 2023 & mmwr_week <= 13) ~ "Wave_3",  # March 2023
TRUE ~ "Other"
)) %>%
filter(wave %in% c("Wave_1", "Wave_2", "Wave_3"))
death_rates <- death_rates %>%
left_join(population, by = c("State" = "state", "mmwr_year" = "year"))
# Calculate the number of months in each period
months_per_period <- data.frame(
wave = c("Wave_1", "Wave_2", "Wave_3"),
months = c(6, 9, 5)  # Number of months for each period
)
# Aggregate total deaths and calculate average death rate
# using average population in a period
death_rate_by_period <- death_rates %>%
group_by(State, wave) %>%
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
# Total deaths in the period
avg_population = mean(population, na.rm = TRUE),
# Average population in the period
.groups = "drop"
) %>%
left_join(months_per_period, by = "wave") %>%
mutate(
avg_death_rate = (total_deaths / avg_population) * 100000 / months
# Death rate per 100,000 per month
)
ggplot(death_rate_by_period, aes(x = wave, y = avg_death_rate,
color = State, group = State)) +
geom_line(size = 1) +  # Line plot for trends
geom_point(size = 2) +  # Add points for visibility
labs(
title = "Average Monthly Death Rate by Period and State",
x = "Period",
y = "Average Monthly Death Rate (per 100,000)"
) +
theme_minimal() +
theme(
legend.position = "right",  # Place legend on the right
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
death_rate_diff <- death_rate_by_period %>%
select(State, wave, avg_death_rate) %>%
spread(key = wave, value = avg_death_rate) %>%  # Reshape data to wide format
mutate(
diff_1_2 = Wave_2 - Wave_1,  # Difference between Wave 1 and Wave 2
diff_2_3 = Wave_3 - Wave_2   # Difference between Wave 2 and Wave 3
) %>%
select(State, diff_1_2, diff_2_3)  # Keep only relevant columns
sorted_diff_1_2 <- death_rate_diff %>%
arrange(diff_1_2) %>%
select(State, diff_1_2)
# Print the sorted tables
print(sorted_diff_1_2)
# Sort by diff_2_3 in descending order and select only state and diff_2_3
sorted_diff_2_3 <- death_rate_diff %>%
arrange(diff_2_3) %>%
select(State, diff_2_3)
# Sort by diff_2_3 in descending order and select only state and diff_2_3
sorted_diff_2_3 <- death_rate_diff %>%
arrange(diff_2_3) %>%
select(State, diff_2_3)
print(sorted_diff_2_3)
library(readxl)
library(janitor)
library(dplyr)
library(tidyr)
library(stringr)
library(tidyverse)
library(jsonlite)
library(purrr)
library(httr2)
library(tidyverse)
library(lubridate)
library(readr)
pop_2022_2023 <- read_excel("/Users/zhangjingxi/Desktop/260 final/data/pop.xlsx", col_names = FALSE)
colnames(pop_2022_2023) <- as.character(pop_2022_2023[2, ]) # Set the first row as headers
# remove twice the first row since there are some header when download the data.
pop_2022_2023 <- pop_2022_2023[-1, ]
pop_2022_2023 <- pop_2022_2023[-1, ]
# remove all the '.' in front of the state name
pop_2022_2023$state_name <- gsub("^\\.", "", pop_2022_2023$state_name)
# Make the data same as pset-4
long_pop<- pop_2022_2023 %>%
pivot_longer(
cols = starts_with("20"),
names_to = "year",
values_to = "population"
)
census_key <- "e772e43cd3ddc77cead5d930d1da491dede1a107"
saveRDS(census_key, file = "census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
request <- request (url) |>
req_url_query(get = I("POP_2020,POP_2021,NAME"),
`for` = I("state:*"),
key = census_key)
response <- request |> req_perform()
population <-  response |>
resp_body_json(simplifyVector = TRUE)
population <- population |>
row_to_names(1) |>
as.tibble()|> # convert to tibble
select(-state)|> # remove stat column
rename(state_name = NAME) |> # rename state column to state_name
pivot_longer (-state_name, names_to = "year", values_to = "population")|>
mutate(year= str_remove(year, "POP_"))|> # remove POP_ from year
mutate(across(-state_name,as.numeric)) # parese all relevant colunns to numeric
population <- rbind(population, long_pop)
population <- population |>
mutate(state = state.abb[match(state_name, state.name)])|>
mutate(state = case_when (
state_name == "Puerto Rico" ~ "PR",
state_name == "District of Columbia" ~ "DC",
TRUE ~ state)) # use case_when to add abbreviations for DC and PR
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url,simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x)
data.frame(region = x$region, region_name = x$region_name, state_name = x$states)|>
mutate(region_name = case_when (
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~
"NY, NJ, PR, VI",
TRUE ~ region_name)))
population <- left_join(population, regions, by = "state_name")
population <- population %>%
mutate(year = as.numeric(year))
get_cdc_data<- function(url, limit = 1000000000) {
ret <- request (url) |>
req_url_query("$limit" = limit) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
return(ret)
}
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
deaths_raw<- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
cases <-cases_raw |>
mutate(cases = parse_number(new_cases),
date = as_date(ymd_hms(end_date)))|>
filter(state %in% population$state) |>
mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date))|>
select(state,mmwr_year,mmwr_week,cases) |>
arrange(state, mmwr_year , mmwr_week)
deaths <- deaths_raw |>
mutate(deaths= parse_number(covid_19_deaths),
date = as_date(ymd_hms(end_date))) |>
filter(state %in% population$state_name) |>
mutate(State = state.abb[match(state,state.name)]) |>
mutate(State = case_when (
state == "Puerto Rico" ~ "PR",
state == "District of Columbia" ~ "DC",
TRUE ~ State)) |>
mutate(mmwr_year = epiyear(date),mmwr_week= as.numeric(mmwr_week))|>
select(mmwr_week, mmwr_year, deaths, State)|>
arrange(State, mmwr_year, mmwr_week)
# Aggregate data at the national level
national_data <- cases %>%
group_by(mmwr_year, mmwr_week) %>%
summarise(total_cases = sum(cases, na.rm = TRUE)) %>%
ungroup()
# Create a date column for easier time-series plotting
national_data <- national_data %>%
mutate(date = as.Date(paste(mmwr_year, mmwr_week, 1, sep = "-"), format = "%Y-%U-%u"))
# Plot the national trend of cases
ggplot(national_data, aes(x = date, y = total_cases)) +
geom_line(color = "blue") +
scale_x_date(
date_labels = "%b",  # Format for abbreviated month names
date_breaks = "2 month"  # Breaks at every month
)+
labs(
title = "National Weekly COVID-19 Cases",
x = "Date",
y = "Total Cases"
) +
theme_minimal()
# Plot the national trend of cases
ggplot(national_data, aes(x = date, y = total_cases)) +
geom_line(color = "blue") +
labs(
title = "National Weekly COVID-19 Cases",
x = "Date",
y = "Total Cases"
) +
theme_minimal()
# Aggregate death data at the national level
national_deaths <- deaths %>%
group_by(mmwr_year, mmwr_week) %>%
summarise(total_deaths = sum(deaths, na.rm = TRUE)) %>%
ungroup()
# Create a date column for easier time-series plotting
national_deaths <- national_deaths %>%
mutate(date = as.Date(paste(mmwr_year, mmwr_week, 1, sep = "-"), format = "%Y-%U-%u"))
# If values are too large, consider a log transformation
ggplot(national_deaths, aes(x = date, y = total_deaths)) +
geom_line(color = "blue") +
scale_y_continuous(trans = "log10",  # Apply log transformation
labels = scales::comma) +  # Format y-axis labels
labs(
title = "COVID-19 Deaths Over Time in the U.S.",
x = "Month",
y = "Total Deaths (Log Scale)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# Define 3 period
death_rates <- deaths %>%
mutate(wave = case_when(
(mmwr_year == 2020 & mmwr_week >= 40) |  # October 2020
(mmwr_year == 2021 & mmwr_week <= 13) ~ "Wave_1",  # March 2021
(mmwr_year == 2021 & mmwr_week >= 31) |  # August 2021
(mmwr_year == 2022 & mmwr_week <= 17) ~ "Wave_2",  # April 2022
(mmwr_year == 2022 & mmwr_week >= 44) |  # November 2022
(mmwr_year == 2023 & mmwr_week <= 13) ~ "Wave_3",  # March 2023
TRUE ~ "Other"
)) %>%
filter(wave %in% c("Wave_1", "Wave_2", "Wave_3"))
death_rates <- death_rates %>%
left_join(population, by = c("State" = "state", "mmwr_year" = "year"))
# Calculate the number of months in each period
months_per_period <- data.frame(
wave = c("Wave_1", "Wave_2", "Wave_3"),
months = c(6, 9, 5)  # Number of months for each period
)
# Aggregate total deaths and calculate average death rate
# using average population in a period
death_rate_by_period <- death_rates %>%
group_by(State, wave) %>%
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
# Total deaths in the period
avg_population = mean(population, na.rm = TRUE),
# Average population in the period
.groups = "drop"
) %>%
left_join(months_per_period, by = "wave") %>%
mutate(
avg_death_rate = (total_deaths / avg_population) * 100000 / months
# Death rate per 100,000 per month
)
ggplot(death_rate_by_period, aes(x = wave, y = avg_death_rate,
color = State, group = State)) +
geom_line(size = 1) +  # Line plot for trends
geom_point(size = 2) +  # Add points for visibility
labs(
title = "Average Monthly Death Rate by Period and State",
x = "Period",
y = "Average Monthly Death Rate (per 100,000)"
) +
theme_minimal() +
theme(
legend.position = "right",  # Place legend on the right
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
death_rate_diff <- death_rate_by_period %>%
select(State, wave, avg_death_rate) %>%
spread(key = wave, value = avg_death_rate) %>%  # Reshape data to wide format
mutate(
diff_1_2 = Wave_2 - Wave_1,  # Difference between Wave 1 and Wave 2
diff_2_3 = Wave_3 - Wave_2   # Difference between Wave 2 and Wave 3
) %>%
select(State, diff_1_2, diff_2_3)  # Keep only relevant columns
sorted_diff_1_2 <- death_rate_diff %>%
arrange(diff_1_2) %>%
select(State, diff_1_2)
print(sorted_diff_1_2)
# Sort by diff_2_3 in descending order and select only state and diff_2_3
sorted_diff_2_3 <- death_rate_diff %>%
arrange(diff_2_3) %>%
select(State, diff_2_3)
print(sorted_diff_2_3)
